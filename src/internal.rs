//! Internal APIs used by the generated code to interact with structsy, not for public use
//!
//!
//!
pub use crate::desc::{Description, EnumDescription, FieldDescription, StructDescription, VariantDescription};
pub use crate::embedded_filter::EmbeddedFilterBuilder;
pub use crate::filter::FilterBuilder;
pub use crate::format::PersistentEmbedded;
pub use crate::index::{
    declare_index, find, find_range, find_range_tx, find_tx, find_unique, find_unique_range, find_unique_range_tx,
    find_unique_tx, IndexableValue,
};
pub use crate::queries::Query;
use crate::{Ref, SRes, Sytx};
use std::io::{Read, Write};

pub struct Field<T, V> {
    pub(crate) name: &'static str,
    pub(crate) access: fn(&T) -> &V,
}
impl<T, V> Field<T, V> {
    #[inline]
    pub fn new(name: &'static str, access: fn(&T) -> &V) -> Self {
        Field { name, access }
    }
}

/// Trait for description of embedded structs, automatically generated by structsy_derive.
pub trait EmbeddedDescription: PersistentEmbedded {
    fn get_description() -> Description;
}

/// Trait implemented by persistent struct, implementation automatically generated by
/// structsy_derive.
pub trait Persistent {
    fn get_name() -> &'static str;
    fn get_description() -> Description;
    fn write(&self, write: &mut dyn Write) -> SRes<()>;
    fn read(read: &mut dyn Read) -> SRes<Self>
    where
        Self: std::marker::Sized;
    fn declare(db: &mut dyn Sytx) -> SRes<()>;
    fn put_indexes(&self, tx: &mut dyn Sytx, id: &Ref<Self>) -> SRes<()>
    where
        Self: std::marker::Sized;
    fn remove_indexes(&self, tx: &mut dyn Sytx, id: &Ref<Self>) -> SRes<()>
    where
        Self: std::marker::Sized;
}
